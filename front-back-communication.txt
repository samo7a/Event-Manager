1- /api/login (POST)
    a- From Frontend -> Server
    {
        email : string,
        password : string,
        loginType : boolean,
    }
    b- From Server -> Frontend
    {
        userId: int,
        firstName: string,
        lastName: string, 
        email: string, 
        picture: blob, 
        msg: String  (empty or has an error msg)
    }
-----------------------------------------------
2- /api/signup (POST):
    a- From Frontend -> Server
    {   
        fName : string,
        lName : string,
        password : string,
        email : string,
        regstrType : boolean,
        university : string,
        uniAddr1 : string,
        uniAddr2 : string,  (change it to city??)
        state : string,
        zip : int
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "Signed Up Super Admin!" or "Signed Up Student!"),
    }

3- /api/addRating (POST)
    a- From Frontend -> Server
    {   
        e_id : int (eventid)
        s_id : int (studentid)
        rating : double
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "rating added"),
    }
-----------------------------------------------
4- /api/updateRating (POST)
    a- From Frontend -> Server
    {   
        e_id : int (eventid)
        s_id : int (studentid)
        rating : double
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "rating updated"),
    }
-----------------------------------------------
5- /api/addComment (POST)
    a- From Frontend -> Server
    {   
        e_id : int (eventid)
        s_id : int (studentid)
        comment : string 
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "comment added"),
    }
-----------------------------------------------
6- /api/updateComment (POST)
    a- From Frontend -> Server
    {   commnetId: int,
        e_id : int (eventid)
        s_id : int (studentid)
        comment : string 
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "comment updated"),
    }
-----------------------------------------------
7- /api/deleteComment (POST)
    a- From Frontend -> Server
    {   
        commnetId: int
        e_id : int (eventid)
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "comment deleted"),
    }
-----------------------------------------------
8- /api/createEventRso (POST)
    a- From Frontend -> Server
    {
        rso_id : int,
        e_name: String,
        e_description : string,
        e_contactEmail : string,
        e_contactPhone : string,
        e_type = string (either "public", or "private", or "rso"; anyother value will cause an error)
        locationName : string,
        address : string,
        e_category : string,
        e_time : string (xx:xx  24hr system)  e.g "16:35"
        e_date : string (YYYY/MM/DD), e.g "2012/12/30",
        e_profilePicture : could be null or a picture,
        isApproved : bit (0: not approved, 1: approved) (rso events are automatically approved so send 1)
                                                        (students created events need to be approved by super admin so send 0)
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "Event Added"),
        e_id : int,
    }
-----------------------------------------------
9- /api/createEventStudent (POST)
    a- From Frontend -> Server
    {
        s_id : int,
        e_name : String,
        e_description : string,
        e_contactEmail : string,
        e_contactPhone : string,
        e_type = string (either "public", or "private", or "rso"; anyother value will cause an error)
        locationName : string,
        address : string,
        e_category : string,
        e_time : string (xx:xx  24hr system)  e.g "16:35"
        e_date : string (YYYY/MM/DD), e.g "2012/12/30",
        e_profilePicture : could be null or a picture,
        isApproved : bit (0: not approved, 1: approved) (students created events need to be approved by super admin so send 0)        
    }
    b- From Server -> Frontend
    {
        msg: string (could be an error msg from the mysql server or "Event Added"),
        e_id : int,
    }
-----------------------------------------------
10- /api/createRso (POST)
    a- From Frontend -> Server
    {
        rso_name : string,
        rso_description : string,
        rso_profilePicture : blob,
        s_id : int (student id who creates the rso aka admin)
    }
    b- From Server -> Frontend
    {
        msg: "Rso Created" or an error, 
        rso_id : int,
    }
-----------------------------------------------
11- /api/joinRso (POST)
    a- From Frontend -> Server
    {
        rso_id : int,
        s_id : int 
    }
    b- From Server -> Frontend
    {
        msg: "joined" or error, 
    }
-----------------------------------------------
12- /api/updateUniversity (POST)
    a- From Frontend -> Server
    {
        u_id : int
        universityName : string,
        uniAddr1 : string,
        uniAddr2 : string,
        state : string,
        zip : int,
        u_description : string,
        u_profilePicture : blob,
    }
    b- From Server -> Frontend
    {
        msg: "University Updated" or error, 
    }
-----------------------------------------------
12- /api/updateAccount (POST)
    a- From Frontend -> Server
    {
        id : int,
        firstName : string,
        lastName : string,
        email : string,
        radioValue : boolean,
        profilePicture : blob,
    }
    b- From Server -> Frontend
    {
        msg : "Account Updated" or error, 
    }
-----------------------------------------------
13- /api/leaveRso (POST)
    a- From Frontend -> Server
    {
        rso_id : int,
        s_id : int 
    }
    b- From Server -> Frontend
    {
        msg: "joined" or error, 
    }
-----------------------------------------------
14- /api/getAllEvents (GET)  ** Changed to (POST)
    a- From Frontend -> Server
    {
        start: String (yyyy/mm/dd),
        end: String (yyyy/mm/dd),
        sa_id: INT (UUID?)
    }
    b- From Server -> Frontend
    {
        e_name: String,
        e_date: String,
        e_id: INT
    }
-----------------------------------------------
15- /api/getEvent (GET) ** Changed to (POST)
    a- From Frontend -> Server
    {
        event_id: INT
    }
    b- From Server -> Frontend
    {
        e_name,
        e_description : string,
        e_contactEmail : string,
        e_contactPhone : string,
        e_type = string (either "public", or "private", or "rso"; anyother value will cause an error)
        locationName : string,
        address : string,
        e_category : string,
        e_time : string (xx:xx  24hr system)  e.g "16:35"
        e_date : string (YYYY/MM/DD), e.g "2012/12/30",
        e_profilePicture : could be null or a picture,
        isApproved : bit (0: not approved, 1: approved)
    }
-----------------------------------------------
16- /api/getUnapprovedEvents ** Changed to (POST)
    a- From Frontend -> Server
    {
        sa_id: INT
    }
    b- From Server -> Frontend
    {
        e_id,
        e_name,
        e_date : string (YYYY/MM/DD), e.g "2012/12/30",
    }
-----------------------------------------------
17- /api/approveEvent (POST)
    a- From Frontend -> Server
    {
        e_id : Int,
        sa_id : Int
    }
    b- From Server -> Frontend
    {
        msg : "Event approved" or mysql error. 
    }
-------------------------------------------------
18 /api/getJoinedGroups (POST)
a- From Frontend -> Server 
{
    s_id : Int
}

b- From Server -> Frontend
{
    [
    rso_id : int,
    rso_name : string,
    status : enum (active : inactive),
    rso_description : string,
    ]
    
}
-----------------------------------------------------
19- /api/getRsoDetails  (POST)   ***** 
a- From Frontend -> Server
{
    rso_id : int,
}

b- From Server -> Frontend
{
    rso_name : string,
    status : enum (active : inactive),
    rso_description : string,
    no_of_members : int,
    admin : {
        s_id : int,
        s_name : string,
    },
    members : [
        {
            s_id : int,
            s_firstName : string,
            s_lastName : string,
            s_profilePicture : null,
        },
        {
            s_id : int,
            s_firstName : string,
            s_lastName : string,
            s_profilePicture : null,
        },
        .
        .
        .
    ],
    events : [
        {
            e_id : int,
            e_name : string,
            e_description : string,
            e_date : string (YYYY/MM/DD), e.g "2012/12/30",
        },
        {
            ...
        },
        .
        .
        .
    ]
}
